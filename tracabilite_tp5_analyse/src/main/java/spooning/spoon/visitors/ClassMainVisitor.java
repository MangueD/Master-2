package spooning.spoon.visitors;

import spoon.processing.AbstractProcessor;
import spoon.reflect.code.CtCodeSnippetStatement;
import spoon.reflect.code.CtComment;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.ModifierKind;
import spoon.reflect.factory.Factory;
import spoon.reflect.reference.CtTypeReference;

public class ClassMainVisitor extends AbstractProcessor<CtClass> {

    //only visit Main.class
    @Override
    public boolean isToBeProcessed(CtClass candidate){
        return !candidate.getMethodsByName("main").isEmpty();
    }

    /**
     * adding a static function in Main to get the current user
     */
    @Override
    public void process(CtClass ctClass) {
        Factory factory = getFactory();

        //Creating the method
        CtMethod userInfo = factory.createMethod();

        //setting modifier
        userInfo.addModifier(ModifierKind.STATIC);
        userInfo.addModifier(ModifierKind.PUBLIC);

        //seting name
        userInfo.setSimpleName("getUserContext");

        //setting return type
        CtTypeReference userCtType = factory.Type().get("application.users.User").getReference();
        userInfo.setType(userCtType);

        //Make the body
        CtCodeSnippetStatement statement = factory.Code().createCodeSnippetStatement("" +
                "return currentUser"
        );
        userInfo.setBody(statement);
        ctClass.addMethod(userInfo);

        //add comment
        CtComment comment = factory.createComment();
        comment.setContent("Generated by Spoon");
        userInfo.addComment(comment);
    }
}
