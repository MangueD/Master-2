package spooning.spoon.visitors;

import spoon.processing.AbstractProcessor;
import spoon.reflect.code.CtBlock;
import spoon.reflect.code.CtCodeSnippetStatement;
import spoon.reflect.code.CtComment;
import spoon.reflect.declaration.CtClass;
import spoon.reflect.declaration.CtMethod;
import spoon.reflect.declaration.CtParameter;
import spoon.reflect.factory.Factory;

import java.util.List;

/**
 * adding a statement at top of each function according to isToBeProcessed(),
 * each statement is a log which contains the class.name method.name and parameters,
 * the format of the log message is Json, Easier to parse later on.
 */
public class MethodLoggingVisitor extends AbstractProcessor<CtMethod> {
    final static String QUOTE_JSON = "\\\"";
    final static String QUOTE_LOG = "\"";
    final static String QUOTE_CONC = " + ";

    //not visit Main.class, tostring method and equals method
    @Override
    public boolean isToBeProcessed(CtMethod candidate){
        String methName = candidate.getSimpleName();
        String className = ((CtClass)candidate.getParent()).getSimpleName();
        return !(className.equals("Main")) &&
                !methName.equals("toString") &&
                !methName.equals("equals") &&
                !(methName.contains("get") && className.equals("User"));
    }


    @Override
    public void process(CtMethod ctMethod) {
        Factory factory = getFactory();

        // creating the parameter Json string for the app code
        String parametersJsonString = parametersJsonString(ctMethod.getParameters());

        // creating the user Json string for the app code
        String userJsonString = QUOTE_LOG + QUOTE_JSON + "user" + QUOTE_JSON + " : " + QUOTE_JSON + QUOTE_LOG + QUOTE_CONC +
                "(Main.getUserContext() == null ? null : Main.getUserContext().getId())" + QUOTE_CONC +
                QUOTE_LOG + QUOTE_JSON + QUOTE_LOG;

        // creating the methode Json string for the app code
        String methodJsonString = QUOTE_LOG + QUOTE_JSON + "method" + QUOTE_JSON + " : " + QUOTE_JSON + QUOTE_LOG + QUOTE_CONC +
                QUOTE_LOG + ctMethod.getSimpleName() + QUOTE_LOG + QUOTE_CONC +
                QUOTE_LOG + QUOTE_JSON + QUOTE_LOG;

        // construct the code
        CtCodeSnippetStatement statement = factory.Code().createCodeSnippetStatement("" +
                "logger.info(" + QUOTE_LOG + "{" + QUOTE_LOG + QUOTE_CONC +
                userJsonString + QUOTE_CONC +
                QUOTE_LOG + ", " + QUOTE_LOG + QUOTE_CONC +
                methodJsonString + QUOTE_CONC +
                QUOTE_LOG + ", " + QUOTE_LOG + QUOTE_CONC +
                parametersJsonString + QUOTE_CONC +
                QUOTE_LOG + "}" + QUOTE_LOG + ")" );
        CtBlock block = ctMethod.getBody();
        if(block != null){
            block.insertBegin(statement);
        }

        //comment on the generated code
        CtComment comment = factory.createComment();
        comment.setContent("Generated by Spoon");
        statement.addComment(comment);
    }

    private String parametersJsonString(List<CtParameter> list){
        String parameters = QUOTE_LOG + QUOTE_JSON + "parameters" + QUOTE_JSON + " : " + QUOTE_LOG + QUOTE_CONC +
                QUOTE_LOG + "[" + QUOTE_LOG;

        for(int i = 0 ; i < list.size() ; i++){
            CtParameter p = (CtParameter) list.get(i);
            parameters += QUOTE_CONC + QUOTE_LOG + QUOTE_JSON + QUOTE_LOG;
            parameters += QUOTE_CONC + p.getSimpleName() + QUOTE_CONC + QUOTE_LOG + QUOTE_JSON + QUOTE_LOG;

            if(i + 1 < list.size()){
                parameters += QUOTE_CONC + QUOTE_LOG + ", " + QUOTE_LOG;
            }
        }
        parameters += QUOTE_CONC + QUOTE_LOG + "]" + QUOTE_LOG;;
        return parameters;
    }
}
